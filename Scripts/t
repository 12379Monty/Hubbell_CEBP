
<!--
<style type="text/css">

body{ /* Normal  */ 
 font-size: 16px; 
}
td {  /* Table  */ 
 font-size: 12; 
}
h1.title { 
 font-size: 28px; color: DarkGreen; 
}
h1 { /* Header 1 */ 
 font-size: 24px; color: DarkBlue; 
}
h2 { /* Header 2 */ 
 font-size: 18px; color: DarkBlue; 
}
h3 { /* Header 3 */ 
 font-size: 18px;
 font-family: "Times New Roman", Times, serif;
 color: DarkBlue;
}
code.r{ /* Code block */
    font-size: 12px;
}
pre { /* Code block - determines code spacing between lines */
    font-size: 14px;
}
</style>
-->


```{r m1a-GlobalOptions, results="hide", include=FALSE, cache=FALSE}
knitr::opts_knit$set(stop_on_error = 2L) #really make it stop
options(knitr.table.format = 'html')

#knitr::dep_auto()
```
<!-- ######################################################################## -->


```{r m1a-Prelims, include=FALSE, echo=FALSE, results='hide', message=FALSE} 

 FN <- "_M1A-CEBP_IntercModel"
if(sum(grepl(FN, list.files()))==0) stop("Check FN")

 suppressMessages(require(rmarkdown))
 suppressMessages(require(knitr))
 options(stringsAsFactors=F) 


 suppressPackageStartupMessages(require(edgeR))

 suppressPackageStartupMessages(require(methods))
 suppressPackageStartupMessages(require(bookdown))

 suppressPackageStartupMessages(require(data.table))
 options(datatable.fread.datatable=F)

 suppressPackageStartupMessages(require(plyr))
 suppressPackageStartupMessages(require(dplyr))
 suppressPackageStartupMessages(require(magrittr))

 # Shotcuts for knitting and redering while in R session (Invoke interactive R from R/Scripts folder)
 kk <- function(n='') knitr::knit2html(paste("t", n, sep=''), envir=globalenv(),
       output=paste(FN,".html", sep=''))

 rr <- function(n='') rmarkdown::render(paste("t", n, sep=''), envir=globalenv(),
       output_file=paste(FN,".html", sep='')) ##, output_dir='Scripts')

 bb <- function(n='') browseURL(paste(FN,".html", sep=''))

 # The usual shotcuts
 zz <- function(n='') source(paste("t", n, sep=''))


 WRKDIR <- '..'
 if(!file.exists(WRKDIR)) stop("WRKDIR ERROR", WRKDIR)

 # do once

 # Shotcuts for knitting and redering while in R session
 kk <- function(n='') knitr::knit2html(paste("t", n, sep=''), envir=globalenv(),
       output=paste('',FN,".html", sep=''))

 rr <- function(n='') render(paste("t", n, sep=''), envir=globalenv(),
       output_file=paste(FN,".html", sep=''), output_dir='Scripts')

 bb <- function(n='') browseURL(paste('',FN,".html", sep=''))

 # The usual shorcuts
 zz <- function(n='') source(paste('', "t", n, sep=''))

 # file rmarkdown file management options: cache, figures
 cache_DIR <- file.path(WRKDIR, 'Scripts', 'cache/M1A/')
 suppressMessages(dir.create(cache_DIR, recursive=T))
 opts_chunk$set(cache.path=cache_DIR)

 figures_DIR <- file.path(WRKDIR, 'Scripts', 'figures/M1A/')
 suppressMessages(dir.create(figures_DIR, recursive=T))
 opts_chunk$set(fig.path=figures_DIR)

 tables_DIR <- file.path(WRKDIR, 'Scripts', 'tables/M1A/')
 suppressMessages(dir.create(tables_DIR, recursive=T))
 #opts_chunk$set(fig.path=tables_DIR)
 
 # need a local copy of help_DIR
 #help_DIR <- file.path(WRKDIR, 'help_files')
 help_DIR <- file.path('.', 'help_files')
 suppressMessages(dir.create(help_DIR, recursive=T))
 
 temp_DIR <- file.path(WRKDIR, 'temp_files')
 suppressMessages(dir.create(temp_DIR, recursive=T))

```
<!-- ######################################################################## -->


*** 
```{r m1a-utilityFns, echo=FALSE}
 # Here we define some utility functions
source('utilityFns.r')
source('Mymva.r')

```
<!-- ######################################################################## -->


***

# Abstract 

Hubbel et al. (2021) [@Hubbell:2021aa] evaluate the impact of a
MCED test in a representative population on overall cancer mortality
and concluce that the aggregate potential to improve public health is significant.

In this script, we reporduce these results using code 
available at https://github.com/grailbio-publications/Hubbell_CEBP_InterceptionModel.

<br/>

# Set parameters 

```{r m1a-set-params, cache=F}

#current output files generated from this version
DATE_CODE <- "20201008"

#if input data has been prepared, draw from this date
#what date does the SEER draw+sensitivity come from?
INPUT_DATE_CODE <- "20201008"

#date code for SEER draw
SOURCE_SEER_DATE_CODE <- "20201008"

#if basic interception model has been run, draw from this version
#what does the archive of all interception come from?
SOURCE_DATE_CODE <- "20201008"

```

* DATE_CODE: `r DATE_CODE`  
* INPUT_DATE_CODE: `r INPUT_DATE_CODE`  
* SOURCE_SEER_DATE_CODE: `r SOURCE_SEER_DATE_CODE`  
* SOURCE_DATE_CODE: `r SOURCE_DATE_CODE`  

<br/>

# Pre-processing

<!-- From prep_input_data/a0_prep_sensitivity_values.R -->

## Retrieve Liu et al. (2020) [@Liu:2020aa] information

Retrieve Liu et al. (2020) [@Liu:2020aa] information
and preprocess to generate isotonic sensitivity by stage.

Cross-validated data for estimates of individual cancer sensitivity
are used for individual cancer sensitivity estimates.

```{r m1a-retrieve-sens, cache=T, cache.vars=c('tStage','fullCcga2TrainSens.frm')}

suppressPackageStartupMessages(require(tidyverse))
suppressPackageStartupMessages(require(Iso))


rawCcga2TrainSens.frm <- 
 as.data.frame(data.table::fread("../extData/20200113_external_train_sens.csv"))

tStage=c("I","II","III","IV","No Stage")

#fill in missing entries
fullCcga2TrainSens.frm <- rawCcga2TrainSens.frm %>%
  select(Cancer=cancer_type_tfl,
         Stage=cstage,
         n=total_cancers,
         c=detec_cancers
   ) %>%
  complete(Cancer,Stage=tStage,fill=list(c=0,n=0))

DT::datatable(fullCcga2TrainSens.frm)

```

Fix sensitivity with isotonic regression within each cancer type.

```{r m1a-isotone-reg, cache=T, cache.vars='ccga2TrainManuscriptIsoSens.frm'}

#isotone regression for sensitivity by stage
isotoneFix.f <- function(Sens,Stage,Num){
  out_val <- Sens
  ndx <- match(tStage,Stage) #numbers from 1:5, natural ordering
  good_ndx <- ndx[!is.na(ndx)]

  if (length(good_ndx)>1){
    #need stages I-IV only in order
    y <- Sens[good_ndx]
    w <- Num[good_ndx]
    val <- Iso::pava(y,w)
    out_val[good_ndx] <- val #put back
  }
  out_val
}

DEBUG <- function() {

ccga2_train_manuscript_iso_sens <- fullCcga2TrainSens.frm %>%
  mutate(sensitivity=case_when(n>0 ~ c/n,
                               TRUE ~ 0.0)) %>%
  group_by(Cancer) %>%
  mutate(original_sens = sensitivity,
         sens=isotoneFix.f(sensitivity,Stage,n)) %>%
  ungroup() %>%
  group_by(Cancer) %>%
  mutate(NoStageDetect=(sum(n[Stage=="No Stage"])>0))  %>%
  ungroup() %>%
  filter((!NoStageDetect & Stage!="No Stage") | (NoStageDetect & Stage=="No Stage")) %>%
  select(Cancer,Stage,c,n,original_sens,sens) %>%
  mutate(Stage=case_when(Stage=="No Stage" ~ "NotStaged",
                         TRUE ~ Stage))

}

ccga2TrainManuscriptIsoSens.frm <- do.call('rbind', lapply(split(fullCcga2TrainSens.frm,
 fullCcga2TrainSens.frm$Cancer), function(Cancer.frm) {
   Cancer.frm$OrigSens <- with(Cancer.frm, ifelse(n>0, c/n, 0))
   Cancer.frm$Sens <- with(Cancer.frm, isotoneFix.f(OrigSens, Stage, n))

   # This is kind of twisted (some cancers are not staged)
   StagedCount <- with(Cancer.frm, sum(n[Stage != "No Stage"]))
   if(StagedCount == 0){
    Cancer.frm <- Cancer.frm %>% dplyr::filter(Stage =="No Stage") %>%
    dplyr::mutate(Stage="NotStaged")
   } else
    Cancer.frm <- Cancer.frm %>% dplyr::filter(Stage != "No Stage")

   Cancer.frm}))

### THE TWO ARE NOT EXACTLY THE SAME ...

write_tsv(ccga2TrainManuscriptIsoSens.frm, 
file.path(tables_DIR, 'ccga2TrainManuscriptIsoSens.tab'))

```

<!-- From prep_input_data/a1_construct_imputed_SEER_draw.R -->

## Merge SEER18 data


#DATE_CODE<-"20200520"

```{r m1a-merge-seer, cache=T, cache.varsc=c('totalSeerDraw.frm', 'isoTotalSeerDraw.frm')}

SEER_PATH <- "../extData/SEER_Draw_Interception_Manuscript_20200728.xlsx"

#should make sure to output the raw data tables from the spreadsheet for future use
stageAairData.frm <- as.data.frame(
         readxl::read_excel(SEER_PATH,
                            sheet="Incidence",
                            range="A2:E126",
                            col_names=c("SEER_Draw","Stage","IR","Count","Population"))
     )


stageCssData.frm <- as.data.frame(
        readxl::read_excel(SEER_PATH,
                           sheet="CSS",
                           range="A4:E2503",
                           col_names=c("SEER_Draw","Stage","TIME","N","CSS"),
                           guess_max=5000)
   )

#filter out "ERROR" codes in SEER results and turn them into NA values
#and return CSS to double type

stageCssData.frm <- stageCssData.frm %>%
  dplyr::mutate(CSS=ifelse(grepl("ERROR",CSS), NA, CSS)) 
stageCssData.frm$CSS <- as.numeric(stageCssData.frm$CSS)


stageCssFilteredData.frm <- stageCssData.frm %>%
  dplyr::mutate(Survival=CSS) %>%
  dplyr::filter(TIME=="60 mo")

stageJointFiltered.frm <- merge(
  stageAairData.frm, stageCssFilteredData.frm, all.x=T) %>%
  select(SEER_Draw,Stage,IR,Survival)###,Count,Population)

#have to deal with these cancers specially
HARD_CANCERS <- c("Lymphoid Leukemia","Myeloid Neoplasm","Plasma Cell Neoplasm","[OTHER]")

#okay, deal with typical cases where stage exists, and unknown/missing can be imputed sensibly
softStageJointFiltered.frm <- stageJointFiltered.frm %>%
  dplyr::filter(!(SEER_Draw %in% HARD_CANCERS)) 

# UR for SEER_Draw == sum(IR) for Stage=="Unknown/missing"
THIS.IS.STANGE <- function() {
unkSoftStageJointFiltered.frm <- softStageJointFiltered.frm %>%
  dplyr::filter(Stage=="Unknown/missing") %>%
  dplyr::group_by(SEER_Draw) %>%
  dplyr::summarize(UR=sum(IR,na.rm=TRUE)) %>%
  dplyr::ungroup()
}
# REPLACE WITH THIS
unkSoftStageJointFiltered.frm  <- softStageJointFiltered.frm %>%
  dplyr::filter(Stage=="Unknown/missing") %>%
  dplyr::rename(UR=IR) %>%
  dplyr::select(SEER_Draw, UR)


tStage=c("I","II","III","IV","Unknown/missing")

# WHAT IS THIS IMPUTATION???
imputedSoftStageJointFiltered.frm <- as.data.frame(
  merge(
  softStageJointFiltered.frm %>% dplyr::filter(Stage %in% tStage[1:4]),
  unkSoftStageJointFiltered.frm, all.x=T)  %>%
  dplyr::group_by(SEER_Draw) %>%
  dplyr::mutate(URX=UR*IR/sum(IR,na.rm=TRUE)) %>%
  dplyr::mutate(URX=replace_na(URX,0.0)) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(IR=IR+URX) %>%
  dplyr::select(-UR,-URX)
)


#unstaged and expected not to be staged
#need to up-impute "staged" to "notstaged" for lymphoid leukemia
#because we don't have by-stage sensitivities that are relevant to those entries in SEER
#rate is relatively small
unstagedJointFiltered.frm <- stageJointFiltered.frm %>%
  dplyr::filter(SEER_Draw %in% HARD_CANCERS[1:3]) %>%
  dplyr::group_by(SEER_Draw) %>%
  dplyr::summarize(
    IR=sum(IR,na.rm=TRUE),
    Survival=Survival[Stage=="Unknown/missing"]) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(Stage="NotStaged") %>%
  dplyr::select(SEER_Draw,Stage,IR,Survival)

#other - heterogenous group so cannot impute unstaged to staged
#also no sensible group-level sensitivity
#but do need incidence and survival data
otherJointFiltered.frm <- stageJointFiltered.frm %>%
  filter(SEER_Draw=="[OTHER]") %>%
  mutate(Stage=case_when(Stage!="Unknown/missing" ~ Stage,
                         TRUE ~ "NotStaged"))

totalJointFiltered.frm <- rbind(
  imputedSoftStageJointFiltered.frm,
  unstagedJointFiltered.frm,
  otherJointFiltered.frm)

totalSeerDraw.frm <- merge(
 totalJointFiltered.frm,
 stageAairData.frm %>% dplyr::rename(origIR=IR),
 by=c("SEER_Draw", "Stage"), all.x=T)

#output imputed SEER data
write_tsv(totalSeerDraw.frm,
  file.path(tables_DIR, paste0(DATE_CODE, "_total_seer_draw.tsv")))

DT::datatable(totalSeerDraw.frm)

```

